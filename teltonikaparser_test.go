// Copyright 2019 Filip Kroƒça. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package teltonikaparser

import (
	"encoding/hex"
	"fmt"
	"testing"
)

const testDataString string

func TestParseIMEI(t *testing.T) {
	//sample data
	bs, _ := hex.DecodeString(testDataString)

	//run test
	imei, err := ParseIMEI(&bs)
	if err != nil {
		t.Errorf("TestParseIMEI() Error when parsing IMEI %v", err)
	}

	if imei != uint64(352094085122452) {
		t.Errorf("TestParseIMEI([]byte) want 352094085122452, got %v ", imei)
	}

}

func TestParseHex2Int32TwoComplement(t *testing.T) {
	bs := []byte{0xE2, 0xD3, 0x5F, 0xE7}

	//run test
	decoded := ParseHex2Int32TwoComplement(&bs, 0, 4)

	if decoded != -489463833 {
		t.Errorf("TestParseHex2Uint64() Error when parsing 0x20,0x9A,0x69,0x00 want 546990336, got %v", decoded)
	}

}

func ExampleParseHex2Int32TwoComplement() {
	bs := []byte{0xE2, 0xD3, 0x5F, 0xE7}

	//run test
	decoded := ParseHex2Int32TwoComplement(&bs, 0, 4)

	fmt.Println(decoded)
	// Output:
	// -489463833

}

func BenchmarkParseHex2Int32TwoComplement(b *testing.B) {
	bs := []byte{0xE2, 0xD3, 0x5F, 0xE7}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		ParseHex2Int32TwoComplement(&bs, 0, 4)
	}
}

func ExampleParseIMEI() {
	//sample data
	bs, _ := hex.DecodeString(testDataString)
	imei, _ := ParseIMEI(&bs)
	fmt.Println(imei)
	// Output:
	// 352094085122452
}

func TestParseHex2Uint64(t *testing.T) {
	bs := []byte{0x20, 0x9A, 0x69, 0x00}

	//run test
	decoded := ParseHex2Uint64(&bs, 0, 4)

	if decoded != uint64(546990336) {
		t.Errorf("TestParseHex2Uint64() Error when parsing 0x20,0x9A,0x69,0x00 want 546990336, got %v", decoded)
	}

}

func BenchmarkParseIMEI(b *testing.B) {
	//sample data
	bs, _ := hex.DecodeString(testDataString)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		ParseIMEI(&bs)
	}
}

func BenchmarkHex2Uint64(b *testing.B) {
	bs := []byte{0x20, 0x9A, 0x69, 0x00}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		ParseHex2Uint64(&bs, 0, 3)
	}
}

func BenchmarkDecode(b *testing.B) {
	bs, _ := hex.DecodeString(testDataString)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Decode(&bs)
	}
}
